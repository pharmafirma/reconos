From Richard Huber (first part) / Daniel Borkmann (second part):

* Install Microblaze GNU Tools on Debian *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This page describes, how to install the GNU cross compiler tools for microblaze
on a debian system. There is a big endian and a little endian version in two
different git repositories. The ReconOS project requires the bit endian version.

First, clone into the git repository hosted by xilinx (big endian):

  git clone git://git.xilinx.com/xldk/microblaze_v2.0.git

Unpack the archive with:

  tar -xzf microblaze-unknown-linux-gnu.tgz

Add the path to the executables to your PATH environment variable:

  export PATH=$PATH:/<path to git repo>/microblaze_v2.0/microblaze-unknown-linux-gnu/bin

You may want to add this last command to your .bashrc so you don't have to
retype it any time you want to use the cross compiler.

* Install Xilinx 13.3er Tools on Debian *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Copy the DVD to a temporary directory on the harddrive. Change ownership
of /opt:

  chown -hR <username> /opt

Change the file mode of the install scripts to be executable:

  chmod a+x <tmp dir>/xsetup <tmp dir>/bin/lin64/*

Execute the install script and follow the instructions on the screen.
(Do not aquire any license keys in the wizard.)

  <tmp dir>/xsetup

Add the following lines to the .bashrc:

  export XILINXD_LICENSE_FILE=<blubber>
  source /opt/Xilinx/13.3/settings64.sh

Create the following link:

  ln /usr/bin/make /usr/bin/gmake

Establish a vpn connection to the ETHZ domain, start a new console and enter.

  ise

... to start the ISE project manager.

* Install Modelsim SE on Debian *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install Sun Java6: Before you can start with the installation of modelsim, you
have to install sun's java. The installer does not work with open java.

Download the software: Download the software from the modelsim website into a
temporary directory.

License file: Set the environment variables for the modelsim license file:

  export LM_LICENSE_FILE=<blubber>
  export MGLS_LICENSE_FILE=<blubber>

Since you have to set these environment variables every time you want to work
with modelsim, we recommend to include these two lines in your .bashrc file.

Installation: Change permission of install.linux, execute it and follow the
instructions on the screen.

  chmod a+x install.linux
  ./install.linux

The recommended installation directory is /opt/modelsim/.

Run modelsim: You can start modelsim with the command

  /PATH/TO/MODELSIM/modeltech/bin/vsim

Alternatively, you may add:

  export PATH=$PATH:/PATH/TO/MODELSIM/modeltech/bin

... to your .bashrc file. If you did this, you can run modelsim with the
command:

  vsim

* Xilinx USB driver for linux *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install required packages:

  sudo apt-get install fxload
  sudo apt-get install libusb-dev
  sudo apt-get install libftdi-dev

Navigate to the directory where you want to install the driver. Get the
driver source:

  git clone git://git.zerfleddert.de/usb-driver

Build the driver:

  cd usb-driver
  make

Run the setup setup script

  ./setup_pcusb

Restart the PC and plugin the JTAG cable. Verify that the SysACE switch is
configured correctly (see images docs/switch.jpg, docs/jumper.jpg).

* Setup ReconOS V3 *
~~~~~~~~~~~~~~~~~~~~

Clone the reconos v3 repository. Add the following lines to the .bashrc:

  export RECONOS=<path to reconos>/reconos_v3
  export PATH=$PATH:$RECONOS/tools
  export RECONOS_BOARD=ml605

Install the microblaze GNU tools as described above. Build the ReconOS libraries:

  cd $RECONOS/linux/fsl_driver
  make
  cd $RECONOS/linux/getpgd
  make
  cd $RECONOS/linux/libreconos
  make
  cd $RECONOS/linux/readpvr
  make

* Run the sort_demo Application *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Be sure that you set up ReconOS V3 correctly. Compile the software:

  cd $RECONOS/demos/sort_demo/linux
  make all

Setup the hardware design:

  $RECONOS/demos/sort_demo/hw/setup.sh

Synthesize hardware desing:

  cd $RECONOS/demos/sort_demo/hw/edk
  make clean all

Download the linux kernel via 

  git clone git://git.xilinx.com/linux-2.6-xlnx.git   or
  http://pc-techinf-25.cs.upb.de/ml605-linux/linux-2.6-xlnx.tar.bz2

... and extract it. Copy the device tree file from the ReconOS reference design
into the linux source.

cp reconos_v3/designs/ml605_linux_13.3/device_tree.dts linux-2.6-xlnx/arch/microblaze/boot/dts/

Compile the linux kernel:

  cd linux-2.6-xlnx 
  make CROSS_COMPILE=microblaze-unknown-linux-gnu- ARCH=microblaze -j8 simpleImage.device_tree

Set up the NFS Server with the Root Filesystem. Install the xilinx usb calbe
driver as described.

Download the bitstream and the linux kernel to the FPGA:

  dow reconos_v3/demos/sort_demo/hw/edk/implementation/system.bit
  dow linux-2.6-xlnx/arch/microblaze/boot/simpleImage.device_tree

* NFS Server with Root Filesystem *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create the exported directory (must be exactly this directory):

  mkdir /exports

Download the ReconOS root filesystem from

  http://pc-techinf-25.cs.upb.de/ml605-linux/rootfs_mb.tar

... into the created folder and untar it:

  tar -xvf /exports/rootfs_mb.tar

Set up a static ip for the NIC (assuming eth0 is connected to the board): Add
the following lines to /etc/network/interfaces

  auto eth0
  iface eth0 inet static
    address 192.168.30.1
    network 192.168.30.0
    netmask 255.255.255.0
    broadcast 192.168.30.255

Install the NFS server packet:

  apt-get install nfs-kernel-server

Configure the NFS server by adding the following line to /etc/exports:

  /exports/rootfs_mb  192.168.30.2(rw,async,no_root_squash)

Verify that you set up reconos correctly!

Copy the ReconOS libraries and scripts to the root folder of the NFS filesystem:

  cp $RECONOS/linux/fsl_driver/fsl.ko /exports/rootfs_mb/
  cp $RECONOS/linux/getpgd/getpgd.ko /exports/rootfs_mb/
  cp $RECONOS/linux/readpvr/readpvr /exports/rootfs_mb/
  cp $RECONOS/linux/scripts/load_fsl.sh /exports/rootfs_mb/
  cp $RECONOS/linux/scripts/load_getpgd.sh /exports/rootfs_mb/
  cp $RECONOS/linux/scripts/rcS /exports/rootfs_mb/

To activate the changes restart the NFS kernel-server service.

* Debug 'Hello World' from console *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Start Xilinx Microprocessor Debugger (XMD) Engine:

  rihuber@pc-10105:~$ xmd
  Xilinx Microprocessor Debugger (XMD) Engine
  Xilinx EDK 12.3 Build EDK_MS3.70d
  Copyright (c) 1995-2009 Xilinx, Inc.  All rights reserved.
  
  XMD%
  Connect the xmd to the hardware:
  
  XMD% connect mb mdm
  
  JTAG chain configuration
  --------------------------------------------------
  Device   ID Code        IR Length    Part Name
   1       0a001093           8        System_ACE_CF
   2       64250093          10        XC6VLX240T
  
  MicroBlaze Processor Configuration :
  -------------------------------------
  Version............................8.00.a
  Optimization.......................Performance
  Interconnect.......................PLB_v46
  MMU Type...........................No_MMU
  No of PC Breakpoints...............1
  No of Read Addr/Data Watchpoints...0
  No of Write Addr/Data Watchpoints..0
  Instruction Cache Support..........off
  Data Cache Support.................off
  Exceptions  Support................off
  FPU  Support.......................off
  Hard Divider Support...............off
  Hard Multiplier Support............on - (Mul32)
  Barrel Shifter Support.............on
  MSR clr/set Instruction Support....on
  Compare Instruction Support........on
  Data Cache Write-back Support......off
  
  Connected to "mb" target. id = 0
  Starting GDB server for "mb" target (id = 0) at TCP port no 1234
  The xmd engine has now opened a gdb server on port 1234.
  
Start the MicroBlaze GNU Debugger:

  rihuber@pc-10105:~/sdk_demo2/hello_world_0/Debug$ mb-gdb hello_world_0.elf
  GNU gdb 6.5
  Copyright (C) 2006 Free Software Foundation, Inc.
  GDB is free software, covered by the GNU General Public License, and you are
  welcome to change it and/or distribute copies of it under certain conditions.
  Type "show copying" to see the conditions.
  There is absolutely no warranty for GDB.  Type "show warranty" for details.
  This GDB was configured as "--host=i686-pc-linux-gnu --target=microblaze-xilinx-elf"...
  Connect to the gdb server provided by the xmd engine:
  
  (gdb) target remote localhost:1234
  Remote debugging using localhost:1234
  0x9000002c in __do_global_dtors_aux ()
  Download the executable to the hardware:
  
  (gdb) load
  Loading section .vectors.reset, size 0x8 lma 0x0
  Loading section .vectors.sw_exception, size 0x8 lma 0x8
  Loading section .vectors.interrupt, size 0x8 lma 0x10
  Loading section .vectors.hw_exception, size 0x8 lma 0x20
  Loading section .text, size 0x804 lma 0x90000000
  Loading section .init, size 0x24 lma 0x90000804
  Loading section .fini, size 0x1c lma 0x90000828
  Loading section .rodata, size 0x16 lma 0x90000844
  Loading section .data, size 0x110 lma 0x90000860
  Loading section .ctors, size 0x8 lma 0x90000970
  Loading section .dtors, size 0x8 lma 0x90000978
  Loading section .eh_frame, size 0x4 lma 0x90000980
  Loading section .jcr, size 0x4 lma 0x90000984
  Start address 0x0, load size 2466
  Transfer rate: 32880 bits/sec, 189 bytes/write.
  Set a breakpoint in main:
  
  (gdb) b main
  Breakpoint 1 at 0x900001b0: file ../src/helloworld.c, line 28.
  Start program execution:
  
  (gdb) c
  Continuing.
  
  Breakpoint 1, main () at ../src/helloworld.c:28
  28      init_platform();

 That's it!

* Getting started with networking *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Also have a look at:
	- docs/networking ... for ...
		- A big picture/overview of ETH parts of ReconOS
		- LANA plugin howto
		- sensord plugin howto
		- Two ANCS conf posters, abstracts
		- Daniel's Mater's thesis
		- Summary of networking tools
		- Summary of networking-related demos
		- Summary of networking-related designs
	- docs/tools ... for ...
		- configd description/howto
		- sensord description/howto
		- timedb description/howto
		- information about logging

This part presents a short tutorial for building the Linux kernel, LANA
modules and the LANA example application, for loading LANA into the kernel
and for developing own functional blocks. This tutorial assumes that you
are using Debian GNU/Linux 6.0. The basic set of tools that are needed
can be obtained via apt-get with the following packages:

* build-essential
  (a Debian meta-package containing basic utilities and libraries for
   building software like gcc, make, g++, coreutils, bsdutils, util-linux,
   sed, tar and others)

* gdb
  (the GNU debugger)

* libncurses5 and libncurses5-dev
  (the graphical ncurses library, needed for ifpps)

* git
  (the distributed version control system)

* grub or grub2
  (a system boot loader, grub2 is default on most installations)

* vim, uemacs or similar
  (a command-line text editor)

* minicom
  (terminal emulation and text-based modem, for remote debugging via RS232)

* coccinelle
  (a semantic patching tool for C)

* flex
  (a fast lexical analyzer generator, needed for bpfc)

* bison
  (a parser generator that is compatible with YACC, needed for bpfc)

* libcelt0-0 and libcelt-dev
  (CELT codec, needed for the LANA voice application)

* libspeexdsp1 and libspeexdsp-dev
  (Speex DSP, needed for the LANA voice application)

* libasound2 and libasound2-dev
  (ALSA lib, needed for the LANA voice application)

Optionally, it might be useful to port the Kernel Source Level Debugger (kgdb)
and the Kernel Source Level Debugger over Ethernet (kgdboe) without too much
efforts from (http://kgdb.linsyssoft.com/intro.htm) for kernel debugging to the
latest Linux release, since Linux explicitly avoids shipping a debugger within
the kernel.

++ Building Linux and LANA
--------------------------

For getting to know git, [http://linux.yyz.us/git-howto.html] gives a great
introduction.

In case you want a host-only LANA deployment (non-ML605), then do the
following:

 1) git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
 2) cd linux
 3) git checkout v2.6.37
 4) make menuconfig
    -- configure the kernel to your needs
    -- simplest case simply exit+save
 5) make -j `grep "^processor" /proc/cpuinfo | wc -l`
 6) make install
 7) make modules_install
 8) cd /boot/
 9) mkinitramfs -o initrd.img-2.6.37 2.6.37
10) update-grub
11) Boot into your new kernel

After the reboot, the LANA repository can then be fetched via Git with the
command (if not yet done):

  git clone git://github.com/EPiCS/reconos.git

and compiled through the following steps:

 1) cd reconos/linux/net/
 2) make

For user space tools, change into the following directories (have a look
into the tool description within the doc folder) and call 'make':

For manual stack configuration:
  - linux/tools/fbctl
  - linux/tools/vlink

For automatic stack configuration:
  - linux/tools/sensord
  - linux/tools/configd

Misc tools:
  - linux/tools/timedb
  - linux/tools/fbviz

In case you're cross-compiling these tools, comment in from the Makefiles:

 CC	=	microblaze-unknown-linux-gnu-gcc
 AR	=	microblaze-unknown-linux-gnu-ar

The same for cross compilation of the kernel modules, comment in the
following:

 ARCH		=	microblaze
 CROSS_COMPILE	=	microblaze-unknown-linux-gnu-
 KDIR		?=	~/linux-2.6-xlnx
 EXTRA_CFLAGS	+=	-I$(PWD)/../reconos/libreconos-ks/
 EXTRA_CFLAGS	+=	-DWITH_RECONOS

 export ARCH CROSS_COMPILE

and comment out:

 MDIR     := /lib/modules/$(shell uname -r)
 KDIR     := $(MDIR)/build

Then re-execute make. Make sure you have installed all the gnu utils as
described in Richard's howto.

In case you want to run LANA on the ML605, you need to copy all relevant
modules (*.ko) files and binaries to the compact flash card. Running it
via nfs is no option, since you will likely loose connection from the
moment you switch the kernel to your own stack.

Make sure you have configured kernel module support for the ML605 Linux
kernel, so that you can load these modules. In some old Paderborn kernel,
this was not the case.

In case you compile with -DWITH_RECONOS, then you also need the kernel
space version of libreconos-ks:

  1) cd linux/reconos/libreconos-ks
  2) make
  3) copy it to the cf card as well

++ Loading LANA kernel modules
------------------------------

In order to load the build kernel modules, do the following:

  1) insmod libreconos.ko  // if it was compiled for reconos
  2) insmod lana.ko        // the core module
  3) insmod fb_<name>.ko   // depending on what fb you want to use

     e.g.:
       insmod fb_eth.ko
       insmod fb_dummy.ko
       insmod fb_pflana.ko

Now none of the loaded functional blocks are active, yet. They have only been
registered to a functional block builder with a constructor and destructor as
well as a type identifier. To add instances of these functional blocks into the
LANA stack, do the following:

  1) vlink ethernet hook eth0          //vlink, since it's a vlink block
    --- vlink ethernet unhook eth0
  2) fbctl add fb0 ch.ethz.csg.dummy   //add dummy fb
    --- fbctl rm fb0

In case of a PF_LANA module, an instance will appear when a PF_LANA socket has
been opened by an application.

Now cat /proc/net/lana/fblocks shows functional block instances that are
currently present in LANA with many information about them:

# cat /proc/net/lana/fblocks 
name|type|address|idp|refcnt|bindings|transition|mapping|pkts|bytes|dropped|duration (jiffies)|properties
fb0 ch.ethz.csg.dummy ffff88021fccd000 1 1 [] norm sw 0 0 0 0 [reliable privacy]
fb1 ch.ethz.csg.dummy ffff8802300a6000 2 1 [] norm sw 0 0 0 0 [reliable privacy]
fb2 ch.ethz.csg.irr ffff88021fccd100 3 1 [] norm sw 0 0 0 0 [reliable]

In case a block gets bound via the bind/bind-e/bind-i command, dependencies
(in form of idps) become visible in this procfs file as well (fb1 was bound
with fb2 and eth0):

# cat /proc/net/lana/fblocks 
name|type|address|idp|refcnt|bindings|transition|mapping|pkts|bytes|dropped|duration (jiffies)|properties
fb0 ch.ethz.csg.dummy ffff88021fccd000 1 1 [] norm sw 0 0 0 0 [reliable privacy]
fb1 ch.ethz.csg.dummy ffff8802300a6000 2 7 [4 3] norm sw 0 0 0 0 [reliable privacy]
fb2 ch.ethz.csg.irr ffff88021fccd100 3 4 [2] norm sw 0 0 0 0 [reliable]
eth0 vlink ffff88021fccd200 4 4 [2] norm sw 0 0 0 0 []

Field descriptions:
	- name: fb instance name
	- type: fb instance type
	- address: pointer to instance structure
	- idp: idp number
	- refcnt: reference/usage counter
	- bindings: list of dependencies to other fbs
	- transition: flag if fblock is in transition phase
	- mapping: shows if fblock runs in sw or hw
	- pkts: # of packets that passed this fblock instance
	- bytes: # of bytes that passed this fblock instance
	- dropped: # of dropped packets from this instance
	- duration: execution time of this fblock in jiffies
	- properties: list of human readable string properties

Once a eth0 (et al.) functional block was initialized via vlink, it is still
possible to communicate with the old stack. Thus, dual-stack functionality is
enabled. In order to gather statistics about LANA-stack only packets, display
them via the PPE's (packet processing engine) procfs file:

# cat /proc/net/lana/ppe 
cpu|pkts|bytes|fblocks|timer-call|timer-cpu-miss|backlog-queue
CPU0:	0	0	0	10700	0	0
CPU1:	0	0	0	0	0	0

Field descriptions:
	- cpu: ksoftirqd execution cpu
	- pkts: # of packets that passed this CPU's PPE
	- bytes: # of bytes that passed this CPU's PPE
	- fblocks: # of fblocks that passed this CPU's PPE
	- timer-call: # of timer calls to invoke this CPU's PPE
	- timer-cpu-miss: # of times a timer call was scheduled on a wrong CPU (non-caller CPU)
	- backlog-queue: size of backlogged packets

Some functional block instances create internal fb-specific files located
under /proc/net/lana/fblock/<instance-name> . This is, for instance, the case
in the fb_bpf or fb_otp:

	- bpfc ipv4.bpf > /proc/net/lana/fblock/fbbpfc
	- dd if=/dev/urandom of=/proc/net/lana/fblock/fbotp
	- cat /proc/net/lana/fblock/fbotp
	- and so on ...

Two functional blocks can be manually bound together by 3 different means:

  1) fbctl bind fb1 fb0           // bind fb0 and fb1 (bidirectional)
    --- fbctl unbind fb1 fb0
  2) fbctl bind-i fb1 fb0         // bind fb0 and fb1 (in ingress direction)
    --- fbctl unbind-i fb1 fb0
  3) fbctl bind-e fb1 fb0         // bind fb0 and fb1 (in egress direction)
    --- fbctl unbind-e fb1 fb0

For unloading modules, first, all connections need to be unbound, all inter-
functional block dependencies removed, so that first the individual fb_<name>.ko
modules can be removed from the stack and then last but not least the lana.ko
module.

Hw/sw offload: currently the ReconOS-based NoC offload engine has to be
configured manually. This means that Xilinx partial reconfiguration does not
yet work, so that a bitsream with built-in hw blocks has to be built. However,
mid-term future work will focus on partial reconfiguration. In order to offload
a functional block, a version in software has to exist and to be created. Then,
we have to tell the PPE that our instance is currently in hardware, so that the
PPE sends it down to the hw block and *not* to the next sw block. To do this,
transfer the sw internal state to the hw block (Florian's work), and set the
hw flag in the sw fblock via:

  1) fbctl fb0 flag trans    // set into transition mode (packets are backlogged
			     // and looped in PPE), used to transfer states
  2) fbctl fb0 flag hw       // set as hardware flag, so that pkts are sent to hw block
  3) fbctl fb0 unflag trans  // unset transition mode, backlogged packets are now
			     // processed/forwarded normally (here: to the hardware)

The same thing counts vice versa (where the state is transferred from hw to sw):

  1) fbctl fb0 flag trans
  2) fbctl fb0 unflag hw
  3) fbctl fb0 unflag trans

For the state transfer itself, have a look at the fb_dummy functions:

	- fb_dummy_linearize(): *flat-copies* internal memory into a binary
				image which is exported to user space via
				linux/net/xt_conf.c .

	- fb_dummy_delinearize(): reverse operation of fb_dummy_linearize().

A device file that is named /dev/lana_ei_cfg must be used to import
the data into user space:
	1) open(/dev/lana_ei_cfg)
	2) ioctl(2) with wanted fbblock name
	3) read(2) for extracting state (e.g. sw->hw) --> fb_dummy_linearize() called
	4) write(2) for setting state (e.g. hw->sw) --> fb_dummy_delinearize() called
	5) close(2)

Note that linearize/delinearize functions are specific to functional block
implementations, and must be implemented for each functional block separately.

A similar notion is present for the configd-internal interface. For inter-node
communication (configd's stack negotiation), the device file /dev/lana_re_cfg
must be used in the same way:
	1) open(/dev/lana_re_cfg)
	2) ioctl(2) with wanted fbblock name
	3) read(2)/poll(2) for receiving remote config data
	4) write(2) for sending config data to remote
	5) close(2)

The read(2) is blocking through a wait_event_interruptible(), but also poll
can be used for the same. xt_conf.c contains an internal skb_queue where skbs
are collected and pushed to user space for the receive path. Thus, the waitqueue
is woken up when a read(2) was executed and a new skb comes in. The packet path
is the following: a stack configuration packet traverses the stack like a usual
packet up to a PF_LANA fblock. Inside the PF_LANA receive handler, a small
header field is examined if the payload contains a i) data packet or ii)
configuration packet. In case of configuration packet, the skb is enqueued inside
xt_conf.c's skb_queue, otherwise it's processed as usual in the BSD socket
interface.

The write(2) call determines which fblock name was selected previously through
ioctl(2). If this check was valid, it sets up an event message for this fblock
with the user configuration payload for the remote target and sends this through
a fb->event_rx(&fbn.nb, FBLOCK_CTL_PUSH, &args) message. Thus, the PF_LANA event
handler is executed and internally calls ...
	case FBLOCK_CTL_PUSH: {
		struct lana_sock_io_args *msg = args;
		ret = __lana_proto_sendmsg(NULL, &fb_priv->sock_self->sk,
				 	   (void *) msg->buff, msg->len,
					   PFLANA_CTL_TYPE_CONF,
					   __FROM_FILE, 0);
		break; }
... for this event, so that the configuration packet will be "tagged" as a cfg
packet inside __lana_proto_sendmsg() and traverses the same path in the stack
as data packets.

Note that ethernet functional blocks have a different notion of binding with
functional blocks, since this was changed/introduced with configd. Depending
on the packet's internal hash, fb_eth multiplexes packets to different fbs.
The packet format looks like: <mac,mac,ether_type(0xabba),hash(sha1)>. Thus,
binding to a functional block is:

  1) fbctl set eth0 <sha1hash>=<fb-2-bind>
	-- this will demultiplex ingress messages to fb's
  2) Send packets in correct (header/hash) format, so that they're not
     dropped for unknown hashes.
  3) For egress messages, use the normal bind or bind-e

Simple example client (without using configd), some code adaptations may still
be needed, but are easy to change:

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <stdint.h>
#include <sys/ioctl.h>
#include <linux/netlink.h>
#include <linux/types.h>
#include <linux/if.h>

#include "xt_vlink.h"
#include "xt_fblock.h"
#include "xutils.h"

int main(int argc, char **argv)
{
	int sock, ret, i, server = 0;
	char buff[512];

	if (argc == 1)
		panic("Usage: %s <client/server>\n", argv[0]);

	sock = socket(27, SOCK_RAW, 0);
	if (sock < 0)
		panic("Cannot create socket!\n");

	if (!strcmp("client", argv[1]))
		server = 0;
	else
		server = 1;

	getchar(); // do the manual binding here, not needed in configd

	memset(buff, 0xff, sizeof(buff));
	while (1) {
		if (server) {
			ret = sendto(sock, buff, 64, 0, NULL, 0);
			if (ret < 0) {
				printf("Error: ret:%d, errno:%d\n", ret, errno);
				continue;
			}
			printf("Sent: ");
			for (i = 0; i < 64; ++i)
				printf("%02x ", (uint8_t) buff[i]);
			printf("\n");
			sleep(1);
		} else {
			ret = recvfrom(sock, buff, 64, 0, NULL, NULL);
			if (ret < 0) {
				if (errno != 11)
					printf("Error: ret:%d, errno:%d\n", ret, errno);
				continue;
			}
			printf("Got: ");
			for (i = 0; i < 64; ++i)
				printf("%02x ", (uint8_t) buff[i]);
			printf("\n");
		}
	}

	close(sock);
	return 0;
}

After compilation, run the a.out and when execution stops at getchar(), do the
manual fbctl bind in your LANA stack, then press a character to continue a.out.

For a more throughout guide for sensord and configd, read the documentation about
them. Here's just a short introduction:

I assume you already did:
	- copy the so-plugins into /opt/sensord/plugins

Then, you can start the full system in the following (+ look at the syslog
output):

  1) load all kernel module
  2) start sensord: ./sensord &
  3) start configd: ./config testconfig.txt
  4) start a config client: ./builtin_ping server

For functional block development, it pays of to also read Paul McKenney's Perfbook:
 git clone git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/perfbook.git

For further documents, look at getting started section of docs/networking/lana_sw.pdf
